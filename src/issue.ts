/*
 * SPDX-FileCopyrightText: 2023 Kevin de Jong <monkaii@hotmail.com>
 * SPDX-License-Identifier: GPL-3.0-or-later
 */

import type { components as octokitComponents } from "@octokit/openapi-types";

type Issue = octokitComponents["schemas"]["issue"];

const ISSUE_HEADER = `<!--
This issue is managed by RemindMe, please do not update this description or remove the TODO label.
@File: {{FILE}}
-->

# TODO

{{BODY}}

## Context

{{REFERENCE}}`;

const ISSUE_FOOTER = `

<hr>

<sub>**This issue is automatically generated by [RemindMe](https://github.com/dev-build-deploy/remind-me)** ðŸ““ </sub>
<details>
<summary><sub>Work instructions...</sub></summary>

A standard RemindMe TODO block looks similar to:
\`\`\`ts
/* @TODO: Support negative values
 * @body: Currently, we only support positive integers, however,
 *        a calculator should also support additions of a negative number
 * @assignees: @Kevin-de-Jong 
 * @milestones: 1
 */
\`\`\`

| Tag | Description | Required? |
| --- | --- | --- |
| \`@TODO:\` | The title of your GitHub issue | **YES**  |
| \`@body\` | The (multiline) description of your GitHub Issue in GitHub Markdown format | NO |
| \`@assignees\` |  A list of GitHub users who should be assigned to this issue | NO |
| \`@milestones\` | Comma-separated list of milestones associated with this issue | NO |

:bulb: Closing a TODO is as simple as removing the associated \`@TODO:\` tag from your file.
</details>`;

export function createIssue(file: string, body: string): string {
  return ISSUE_HEADER.replace("{{FILE}}", file).replace("{{BODY}}", body) + ISSUE_FOOTER;
}

export function isMatchingIssue(issue: Issue, file: string, title: string): boolean {
  return (
    issue.labels.includes("TODO") &&
    issue.title === title &&
    issue.body !== null &&
    issue.body !== undefined &&
    issue.body.includes(`@File: ${file}`)
  );
}

export function getMatchingIssue(issues: Issue[], file: string, title: string): Issue | undefined {
  const matches = issues.filter(issue => isMatchingIssue(issue, file, title));
  if (matches.length > 0) return matches[0];

  return;
}
